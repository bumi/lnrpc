# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: routerrpc/router.proto

require 'google/protobuf'

require 'lightning_pb'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("routerrpc/router.proto", :syntax => :proto3) do
    add_message "routerrpc.SendPaymentRequest" do
      optional :dest, :bytes, 1
      optional :amt, :int64, 2
      optional :amt_msat, :int64, 12
      optional :payment_hash, :bytes, 3
      optional :final_cltv_delta, :int32, 4
      optional :payment_addr, :bytes, 20
      optional :payment_request, :string, 5
      optional :timeout_seconds, :int32, 6
      optional :fee_limit_sat, :int64, 7
      optional :fee_limit_msat, :int64, 13
      optional :outgoing_chan_id, :uint64, 8
      repeated :outgoing_chan_ids, :uint64, 19
      optional :last_hop_pubkey, :bytes, 14
      optional :cltv_limit, :int32, 9
      repeated :route_hints, :message, 10, "lnrpc.RouteHint"
      map :dest_custom_records, :uint64, :bytes, 11
      optional :allow_self_payment, :bool, 15
      repeated :dest_features, :enum, 16, "lnrpc.FeatureBit"
      optional :max_parts, :uint32, 17
      optional :no_inflight_updates, :bool, 18
      optional :max_shard_size_msat, :uint64, 21
      optional :amp, :bool, 22
      optional :time_pref, :double, 23
    end
    add_message "routerrpc.TrackPaymentRequest" do
      optional :payment_hash, :bytes, 1
      optional :no_inflight_updates, :bool, 2
    end
    add_message "routerrpc.RouteFeeRequest" do
      optional :dest, :bytes, 1
      optional :amt_sat, :int64, 2
    end
    add_message "routerrpc.RouteFeeResponse" do
      optional :routing_fee_msat, :int64, 1
      optional :time_lock_delay, :int64, 2
    end
    add_message "routerrpc.SendToRouteRequest" do
      optional :payment_hash, :bytes, 1
      optional :route, :message, 2, "lnrpc.Route"
      optional :skip_temp_err, :bool, 3
    end
    add_message "routerrpc.SendToRouteResponse" do
      optional :preimage, :bytes, 1
      optional :failure, :message, 2, "lnrpc.Failure"
    end
    add_message "routerrpc.ResetMissionControlRequest" do
    end
    add_message "routerrpc.ResetMissionControlResponse" do
    end
    add_message "routerrpc.QueryMissionControlRequest" do
    end
    add_message "routerrpc.QueryMissionControlResponse" do
      repeated :pairs, :message, 2, "routerrpc.PairHistory"
    end
    add_message "routerrpc.XImportMissionControlRequest" do
      repeated :pairs, :message, 1, "routerrpc.PairHistory"
      optional :force, :bool, 2
    end
    add_message "routerrpc.XImportMissionControlResponse" do
    end
    add_message "routerrpc.PairHistory" do
      optional :node_from, :bytes, 1
      optional :node_to, :bytes, 2
      optional :history, :message, 7, "routerrpc.PairData"
    end
    add_message "routerrpc.PairData" do
      optional :fail_time, :int64, 1
      optional :fail_amt_sat, :int64, 2
      optional :fail_amt_msat, :int64, 4
      optional :success_time, :int64, 5
      optional :success_amt_sat, :int64, 6
      optional :success_amt_msat, :int64, 7
    end
    add_message "routerrpc.GetMissionControlConfigRequest" do
    end
    add_message "routerrpc.GetMissionControlConfigResponse" do
      optional :config, :message, 1, "routerrpc.MissionControlConfig"
    end
    add_message "routerrpc.SetMissionControlConfigRequest" do
      optional :config, :message, 1, "routerrpc.MissionControlConfig"
    end
    add_message "routerrpc.SetMissionControlConfigResponse" do
    end
    add_message "routerrpc.MissionControlConfig" do
      optional :half_life_seconds, :uint64, 1
      optional :hop_probability, :float, 2
      optional :weight, :float, 3
      optional :maximum_payment_results, :uint32, 4
      optional :minimum_failure_relax_interval, :uint64, 5
    end
    add_message "routerrpc.QueryProbabilityRequest" do
      optional :from_node, :bytes, 1
      optional :to_node, :bytes, 2
      optional :amt_msat, :int64, 3
    end
    add_message "routerrpc.QueryProbabilityResponse" do
      optional :probability, :double, 1
      optional :history, :message, 2, "routerrpc.PairData"
    end
    add_message "routerrpc.BuildRouteRequest" do
      optional :amt_msat, :int64, 1
      optional :final_cltv_delta, :int32, 2
      optional :outgoing_chan_id, :uint64, 3
      repeated :hop_pubkeys, :bytes, 4
      optional :payment_addr, :bytes, 5
    end
    add_message "routerrpc.BuildRouteResponse" do
      optional :route, :message, 1, "lnrpc.Route"
    end
    add_message "routerrpc.SubscribeHtlcEventsRequest" do
    end
    add_message "routerrpc.HtlcEvent" do
      optional :incoming_channel_id, :uint64, 1
      optional :outgoing_channel_id, :uint64, 2
      optional :incoming_htlc_id, :uint64, 3
      optional :outgoing_htlc_id, :uint64, 4
      optional :timestamp_ns, :uint64, 5
      optional :event_type, :enum, 6, "routerrpc.HtlcEvent.EventType"
      oneof :event do
        optional :forward_event, :message, 7, "routerrpc.ForwardEvent"
        optional :forward_fail_event, :message, 8, "routerrpc.ForwardFailEvent"
        optional :settle_event, :message, 9, "routerrpc.SettleEvent"
        optional :link_fail_event, :message, 10, "routerrpc.LinkFailEvent"
      end
    end
    add_enum "routerrpc.HtlcEvent.EventType" do
      value :UNKNOWN, 0
      value :SEND, 1
      value :RECEIVE, 2
      value :FORWARD, 3
    end
    add_message "routerrpc.HtlcInfo" do
      optional :incoming_timelock, :uint32, 1
      optional :outgoing_timelock, :uint32, 2
      optional :incoming_amt_msat, :uint64, 3
      optional :outgoing_amt_msat, :uint64, 4
    end
    add_message "routerrpc.ForwardEvent" do
      optional :info, :message, 1, "routerrpc.HtlcInfo"
    end
    add_message "routerrpc.ForwardFailEvent" do
    end
    add_message "routerrpc.SettleEvent" do
      optional :preimage, :bytes, 1
    end
    add_message "routerrpc.LinkFailEvent" do
      optional :info, :message, 1, "routerrpc.HtlcInfo"
      optional :wire_failure, :enum, 2, "lnrpc.Failure.FailureCode"
      optional :failure_detail, :enum, 3, "routerrpc.FailureDetail"
      optional :failure_string, :string, 4
    end
    add_message "routerrpc.PaymentStatus" do
      optional :state, :enum, 1, "routerrpc.PaymentState"
      optional :preimage, :bytes, 2
      repeated :htlcs, :message, 4, "lnrpc.HTLCAttempt"
    end
    add_message "routerrpc.CircuitKey" do
      optional :chan_id, :uint64, 1
      optional :htlc_id, :uint64, 2
    end
    add_message "routerrpc.ForwardHtlcInterceptRequest" do
      optional :incoming_circuit_key, :message, 1, "routerrpc.CircuitKey"
      optional :incoming_amount_msat, :uint64, 5
      optional :incoming_expiry, :uint32, 6
      optional :payment_hash, :bytes, 2
      optional :outgoing_requested_chan_id, :uint64, 7
      optional :outgoing_amount_msat, :uint64, 3
      optional :outgoing_expiry, :uint32, 4
      map :custom_records, :uint64, :bytes, 8
      optional :onion_blob, :bytes, 9
    end
    add_message "routerrpc.ForwardHtlcInterceptResponse" do
      optional :incoming_circuit_key, :message, 1, "routerrpc.CircuitKey"
      optional :action, :enum, 2, "routerrpc.ResolveHoldForwardAction"
      optional :preimage, :bytes, 3
      optional :failure_message, :bytes, 4
      optional :failure_code, :enum, 5, "lnrpc.Failure.FailureCode"
    end
    add_message "routerrpc.UpdateChanStatusRequest" do
      optional :chan_point, :message, 1, "lnrpc.ChannelPoint"
      optional :action, :enum, 2, "routerrpc.ChanStatusAction"
    end
    add_message "routerrpc.UpdateChanStatusResponse" do
    end
    add_enum "routerrpc.FailureDetail" do
      value :UNKNOWN, 0
      value :NO_DETAIL, 1
      value :ONION_DECODE, 2
      value :LINK_NOT_ELIGIBLE, 3
      value :ON_CHAIN_TIMEOUT, 4
      value :HTLC_EXCEEDS_MAX, 5
      value :INSUFFICIENT_BALANCE, 6
      value :INCOMPLETE_FORWARD, 7
      value :HTLC_ADD_FAILED, 8
      value :FORWARDS_DISABLED, 9
      value :INVOICE_CANCELED, 10
      value :INVOICE_UNDERPAID, 11
      value :INVOICE_EXPIRY_TOO_SOON, 12
      value :INVOICE_NOT_OPEN, 13
      value :MPP_INVOICE_TIMEOUT, 14
      value :ADDRESS_MISMATCH, 15
      value :SET_TOTAL_MISMATCH, 16
      value :SET_TOTAL_TOO_LOW, 17
      value :SET_OVERPAID, 18
      value :UNKNOWN_INVOICE, 19
      value :INVALID_KEYSEND, 20
      value :MPP_IN_PROGRESS, 21
      value :CIRCULAR_ROUTE, 22
    end
    add_enum "routerrpc.PaymentState" do
      value :IN_FLIGHT, 0
      value :SUCCEEDED, 1
      value :FAILED_TIMEOUT, 2
      value :FAILED_NO_ROUTE, 3
      value :FAILED_ERROR, 4
      value :FAILED_INCORRECT_PAYMENT_DETAILS, 5
      value :FAILED_INSUFFICIENT_BALANCE, 6
    end
    add_enum "routerrpc.ResolveHoldForwardAction" do
      value :SETTLE, 0
      value :FAIL, 1
      value :RESUME, 2
    end
    add_enum "routerrpc.ChanStatusAction" do
      value :ENABLE, 0
      value :DISABLE, 1
      value :AUTO, 2
    end
  end
end

module Routerrpc
  SendPaymentRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.SendPaymentRequest").msgclass
  TrackPaymentRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.TrackPaymentRequest").msgclass
  RouteFeeRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.RouteFeeRequest").msgclass
  RouteFeeResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.RouteFeeResponse").msgclass
  SendToRouteRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.SendToRouteRequest").msgclass
  SendToRouteResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.SendToRouteResponse").msgclass
  ResetMissionControlRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.ResetMissionControlRequest").msgclass
  ResetMissionControlResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.ResetMissionControlResponse").msgclass
  QueryMissionControlRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.QueryMissionControlRequest").msgclass
  QueryMissionControlResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.QueryMissionControlResponse").msgclass
  XImportMissionControlRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.XImportMissionControlRequest").msgclass
  XImportMissionControlResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.XImportMissionControlResponse").msgclass
  PairHistory = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.PairHistory").msgclass
  PairData = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.PairData").msgclass
  GetMissionControlConfigRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.GetMissionControlConfigRequest").msgclass
  GetMissionControlConfigResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.GetMissionControlConfigResponse").msgclass
  SetMissionControlConfigRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.SetMissionControlConfigRequest").msgclass
  SetMissionControlConfigResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.SetMissionControlConfigResponse").msgclass
  MissionControlConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.MissionControlConfig").msgclass
  QueryProbabilityRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.QueryProbabilityRequest").msgclass
  QueryProbabilityResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.QueryProbabilityResponse").msgclass
  BuildRouteRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.BuildRouteRequest").msgclass
  BuildRouteResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.BuildRouteResponse").msgclass
  SubscribeHtlcEventsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.SubscribeHtlcEventsRequest").msgclass
  HtlcEvent = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.HtlcEvent").msgclass
  HtlcEvent::EventType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.HtlcEvent.EventType").enummodule
  HtlcInfo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.HtlcInfo").msgclass
  ForwardEvent = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.ForwardEvent").msgclass
  ForwardFailEvent = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.ForwardFailEvent").msgclass
  SettleEvent = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.SettleEvent").msgclass
  LinkFailEvent = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.LinkFailEvent").msgclass
  PaymentStatus = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.PaymentStatus").msgclass
  CircuitKey = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.CircuitKey").msgclass
  ForwardHtlcInterceptRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.ForwardHtlcInterceptRequest").msgclass
  ForwardHtlcInterceptResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.ForwardHtlcInterceptResponse").msgclass
  UpdateChanStatusRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.UpdateChanStatusRequest").msgclass
  UpdateChanStatusResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.UpdateChanStatusResponse").msgclass
  FailureDetail = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.FailureDetail").enummodule
  PaymentState = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.PaymentState").enummodule
  ResolveHoldForwardAction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.ResolveHoldForwardAction").enummodule
  ChanStatusAction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("routerrpc.ChanStatusAction").enummodule
end
