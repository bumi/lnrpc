# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: lightning.proto

require 'google/protobuf'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("lightning.proto", :syntax => :proto3) do
    add_message "lnrpc.SubscribeCustomMessagesRequest" do
    end
    add_message "lnrpc.CustomMessage" do
      optional :peer, :bytes, 1
      optional :type, :uint32, 2
      optional :data, :bytes, 3
    end
    add_message "lnrpc.SendCustomMessageRequest" do
      optional :peer, :bytes, 1
      optional :type, :uint32, 2
      optional :data, :bytes, 3
    end
    add_message "lnrpc.SendCustomMessageResponse" do
    end
    add_message "lnrpc.Utxo" do
      optional :address_type, :enum, 1, "lnrpc.AddressType"
      optional :address, :string, 2
      optional :amount_sat, :int64, 3
      optional :pk_script, :string, 4
      optional :outpoint, :message, 5, "lnrpc.OutPoint"
      optional :confirmations, :int64, 6
    end
    add_message "lnrpc.OutputDetail" do
      optional :output_type, :enum, 1, "lnrpc.OutputScriptType"
      optional :address, :string, 2
      optional :pk_script, :string, 3
      optional :output_index, :int64, 4
      optional :amount, :int64, 5
      optional :is_our_address, :bool, 6
    end
    add_message "lnrpc.Transaction" do
      optional :tx_hash, :string, 1
      optional :amount, :int64, 2
      optional :num_confirmations, :int32, 3
      optional :block_hash, :string, 4
      optional :block_height, :int32, 5
      optional :time_stamp, :int64, 6
      optional :total_fees, :int64, 7
      repeated :dest_addresses, :string, 8
      repeated :output_details, :message, 11, "lnrpc.OutputDetail"
      optional :raw_tx_hex, :string, 9
      optional :label, :string, 10
      repeated :previous_outpoints, :message, 12, "lnrpc.PreviousOutPoint"
    end
    add_message "lnrpc.GetTransactionsRequest" do
      optional :start_height, :int32, 1
      optional :end_height, :int32, 2
      optional :account, :string, 3
    end
    add_message "lnrpc.TransactionDetails" do
      repeated :transactions, :message, 1, "lnrpc.Transaction"
    end
    add_message "lnrpc.FeeLimit" do
      oneof :limit do
        optional :fixed, :int64, 1
        optional :fixed_msat, :int64, 3
        optional :percent, :int64, 2
      end
    end
    add_message "lnrpc.SendRequest" do
      optional :dest, :bytes, 1
      optional :dest_string, :string, 2
      optional :amt, :int64, 3
      optional :amt_msat, :int64, 12
      optional :payment_hash, :bytes, 4
      optional :payment_hash_string, :string, 5
      optional :payment_request, :string, 6
      optional :final_cltv_delta, :int32, 7
      optional :fee_limit, :message, 8, "lnrpc.FeeLimit"
      optional :outgoing_chan_id, :uint64, 9
      optional :last_hop_pubkey, :bytes, 13
      optional :cltv_limit, :uint32, 10
      map :dest_custom_records, :uint64, :bytes, 11
      optional :allow_self_payment, :bool, 14
      repeated :dest_features, :enum, 15, "lnrpc.FeatureBit"
      optional :payment_addr, :bytes, 16
    end
    add_message "lnrpc.SendResponse" do
      optional :payment_error, :string, 1
      optional :payment_preimage, :bytes, 2
      optional :payment_route, :message, 3, "lnrpc.Route"
      optional :payment_hash, :bytes, 4
    end
    add_message "lnrpc.SendToRouteRequest" do
      optional :payment_hash, :bytes, 1
      optional :payment_hash_string, :string, 2
      optional :route, :message, 4, "lnrpc.Route"
    end
    add_message "lnrpc.ChannelAcceptRequest" do
      optional :node_pubkey, :bytes, 1
      optional :chain_hash, :bytes, 2
      optional :pending_chan_id, :bytes, 3
      optional :funding_amt, :uint64, 4
      optional :push_amt, :uint64, 5
      optional :dust_limit, :uint64, 6
      optional :max_value_in_flight, :uint64, 7
      optional :channel_reserve, :uint64, 8
      optional :min_htlc, :uint64, 9
      optional :fee_per_kw, :uint64, 10
      optional :csv_delay, :uint32, 11
      optional :max_accepted_htlcs, :uint32, 12
      optional :channel_flags, :uint32, 13
      optional :commitment_type, :enum, 14, "lnrpc.CommitmentType"
      optional :wants_zero_conf, :bool, 15
      optional :wants_scid_alias, :bool, 16
    end
    add_message "lnrpc.ChannelAcceptResponse" do
      optional :accept, :bool, 1
      optional :pending_chan_id, :bytes, 2
      optional :error, :string, 3
      optional :upfront_shutdown, :string, 4
      optional :csv_delay, :uint32, 5
      optional :reserve_sat, :uint64, 6
      optional :in_flight_max_msat, :uint64, 7
      optional :max_htlc_count, :uint32, 8
      optional :min_htlc_in, :uint64, 9
      optional :min_accept_depth, :uint32, 10
      optional :zero_conf, :bool, 11
    end
    add_message "lnrpc.ChannelPoint" do
      optional :output_index, :uint32, 3
      oneof :funding_txid do
        optional :funding_txid_bytes, :bytes, 1
        optional :funding_txid_str, :string, 2
      end
    end
    add_message "lnrpc.OutPoint" do
      optional :txid_bytes, :bytes, 1
      optional :txid_str, :string, 2
      optional :output_index, :uint32, 3
    end
    add_message "lnrpc.PreviousOutPoint" do
      optional :outpoint, :string, 1
      optional :is_our_output, :bool, 2
    end
    add_message "lnrpc.LightningAddress" do
      optional :pubkey, :string, 1
      optional :host, :string, 2
    end
    add_message "lnrpc.EstimateFeeRequest" do
      map :AddrToAmount, :string, :int64, 1
      optional :target_conf, :int32, 2
      optional :min_confs, :int32, 3
      optional :spend_unconfirmed, :bool, 4
    end
    add_message "lnrpc.EstimateFeeResponse" do
      optional :fee_sat, :int64, 1
      optional :feerate_sat_per_byte, :int64, 2
      optional :sat_per_vbyte, :uint64, 3
    end
    add_message "lnrpc.SendManyRequest" do
      map :AddrToAmount, :string, :int64, 1
      optional :target_conf, :int32, 3
      optional :sat_per_vbyte, :uint64, 4
      optional :sat_per_byte, :int64, 5
      optional :label, :string, 6
      optional :min_confs, :int32, 7
      optional :spend_unconfirmed, :bool, 8
    end
    add_message "lnrpc.SendManyResponse" do
      optional :txid, :string, 1
    end
    add_message "lnrpc.SendCoinsRequest" do
      optional :addr, :string, 1
      optional :amount, :int64, 2
      optional :target_conf, :int32, 3
      optional :sat_per_vbyte, :uint64, 4
      optional :sat_per_byte, :int64, 5
      optional :send_all, :bool, 6
      optional :label, :string, 7
      optional :min_confs, :int32, 8
      optional :spend_unconfirmed, :bool, 9
    end
    add_message "lnrpc.SendCoinsResponse" do
      optional :txid, :string, 1
    end
    add_message "lnrpc.ListUnspentRequest" do
      optional :min_confs, :int32, 1
      optional :max_confs, :int32, 2
      optional :account, :string, 3
    end
    add_message "lnrpc.ListUnspentResponse" do
      repeated :utxos, :message, 1, "lnrpc.Utxo"
    end
    add_message "lnrpc.NewAddressRequest" do
      optional :type, :enum, 1, "lnrpc.AddressType"
      optional :account, :string, 2
    end
    add_message "lnrpc.NewAddressResponse" do
      optional :address, :string, 1
    end
    add_message "lnrpc.SignMessageRequest" do
      optional :msg, :bytes, 1
      optional :single_hash, :bool, 2
    end
    add_message "lnrpc.SignMessageResponse" do
      optional :signature, :string, 1
    end
    add_message "lnrpc.VerifyMessageRequest" do
      optional :msg, :bytes, 1
      optional :signature, :string, 2
    end
    add_message "lnrpc.VerifyMessageResponse" do
      optional :valid, :bool, 1
      optional :pubkey, :string, 2
    end
    add_message "lnrpc.ConnectPeerRequest" do
      optional :addr, :message, 1, "lnrpc.LightningAddress"
      optional :perm, :bool, 2
      optional :timeout, :uint64, 3
    end
    add_message "lnrpc.ConnectPeerResponse" do
    end
    add_message "lnrpc.DisconnectPeerRequest" do
      optional :pub_key, :string, 1
    end
    add_message "lnrpc.DisconnectPeerResponse" do
    end
    add_message "lnrpc.HTLC" do
      optional :incoming, :bool, 1
      optional :amount, :int64, 2
      optional :hash_lock, :bytes, 3
      optional :expiration_height, :uint32, 4
      optional :htlc_index, :uint64, 5
      optional :forwarding_channel, :uint64, 6
      optional :forwarding_htlc_index, :uint64, 7
    end
    add_message "lnrpc.ChannelConstraints" do
      optional :csv_delay, :uint32, 1
      optional :chan_reserve_sat, :uint64, 2
      optional :dust_limit_sat, :uint64, 3
      optional :max_pending_amt_msat, :uint64, 4
      optional :min_htlc_msat, :uint64, 5
      optional :max_accepted_htlcs, :uint32, 6
    end
    add_message "lnrpc.Channel" do
      optional :active, :bool, 1
      optional :remote_pubkey, :string, 2
      optional :channel_point, :string, 3
      optional :chan_id, :uint64, 4
      optional :capacity, :int64, 5
      optional :local_balance, :int64, 6
      optional :remote_balance, :int64, 7
      optional :commit_fee, :int64, 8
      optional :commit_weight, :int64, 9
      optional :fee_per_kw, :int64, 10
      optional :unsettled_balance, :int64, 11
      optional :total_satoshis_sent, :int64, 12
      optional :total_satoshis_received, :int64, 13
      optional :num_updates, :uint64, 14
      repeated :pending_htlcs, :message, 15, "lnrpc.HTLC"
      optional :csv_delay, :uint32, 16
      optional :private, :bool, 17
      optional :initiator, :bool, 18
      optional :chan_status_flags, :string, 19
      optional :local_chan_reserve_sat, :int64, 20
      optional :remote_chan_reserve_sat, :int64, 21
      optional :static_remote_key, :bool, 22
      optional :commitment_type, :enum, 26, "lnrpc.CommitmentType"
      optional :lifetime, :int64, 23
      optional :uptime, :int64, 24
      optional :close_address, :string, 25
      optional :push_amount_sat, :uint64, 27
      optional :thaw_height, :uint32, 28
      optional :local_constraints, :message, 29, "lnrpc.ChannelConstraints"
      optional :remote_constraints, :message, 30, "lnrpc.ChannelConstraints"
      repeated :alias_scids, :uint64, 31
      optional :zero_conf, :bool, 32
      optional :zero_conf_confirmed_scid, :uint64, 33
    end
    add_message "lnrpc.ListChannelsRequest" do
      optional :active_only, :bool, 1
      optional :inactive_only, :bool, 2
      optional :public_only, :bool, 3
      optional :private_only, :bool, 4
      optional :peer, :bytes, 5
    end
    add_message "lnrpc.ListChannelsResponse" do
      repeated :channels, :message, 11, "lnrpc.Channel"
    end
    add_message "lnrpc.AliasMap" do
      optional :base_scid, :uint64, 1
      repeated :aliases, :uint64, 2
    end
    add_message "lnrpc.ListAliasesRequest" do
    end
    add_message "lnrpc.ListAliasesResponse" do
      repeated :alias_maps, :message, 1, "lnrpc.AliasMap"
    end
    add_message "lnrpc.ChannelCloseSummary" do
      optional :channel_point, :string, 1
      optional :chan_id, :uint64, 2
      optional :chain_hash, :string, 3
      optional :closing_tx_hash, :string, 4
      optional :remote_pubkey, :string, 5
      optional :capacity, :int64, 6
      optional :close_height, :uint32, 7
      optional :settled_balance, :int64, 8
      optional :time_locked_balance, :int64, 9
      optional :close_type, :enum, 10, "lnrpc.ChannelCloseSummary.ClosureType"
      optional :open_initiator, :enum, 11, "lnrpc.Initiator"
      optional :close_initiator, :enum, 12, "lnrpc.Initiator"
      repeated :resolutions, :message, 13, "lnrpc.Resolution"
      repeated :alias_scids, :uint64, 14
      optional :zero_conf_confirmed_scid, :uint64, 15
    end
    add_enum "lnrpc.ChannelCloseSummary.ClosureType" do
      value :COOPERATIVE_CLOSE, 0
      value :LOCAL_FORCE_CLOSE, 1
      value :REMOTE_FORCE_CLOSE, 2
      value :BREACH_CLOSE, 3
      value :FUNDING_CANCELED, 4
      value :ABANDONED, 5
    end
    add_message "lnrpc.Resolution" do
      optional :resolution_type, :enum, 1, "lnrpc.ResolutionType"
      optional :outcome, :enum, 2, "lnrpc.ResolutionOutcome"
      optional :outpoint, :message, 3, "lnrpc.OutPoint"
      optional :amount_sat, :uint64, 4
      optional :sweep_txid, :string, 5
    end
    add_message "lnrpc.ClosedChannelsRequest" do
      optional :cooperative, :bool, 1
      optional :local_force, :bool, 2
      optional :remote_force, :bool, 3
      optional :breach, :bool, 4
      optional :funding_canceled, :bool, 5
      optional :abandoned, :bool, 6
    end
    add_message "lnrpc.ClosedChannelsResponse" do
      repeated :channels, :message, 1, "lnrpc.ChannelCloseSummary"
    end
    add_message "lnrpc.Peer" do
      optional :pub_key, :string, 1
      optional :address, :string, 3
      optional :bytes_sent, :uint64, 4
      optional :bytes_recv, :uint64, 5
      optional :sat_sent, :int64, 6
      optional :sat_recv, :int64, 7
      optional :inbound, :bool, 8
      optional :ping_time, :int64, 9
      optional :sync_type, :enum, 10, "lnrpc.Peer.SyncType"
      map :features, :uint32, :message, 11, "lnrpc.Feature"
      repeated :errors, :message, 12, "lnrpc.TimestampedError"
      optional :flap_count, :int32, 13
      optional :last_flap_ns, :int64, 14
      optional :last_ping_payload, :bytes, 15
    end
    add_enum "lnrpc.Peer.SyncType" do
      value :UNKNOWN_SYNC, 0
      value :ACTIVE_SYNC, 1
      value :PASSIVE_SYNC, 2
      value :PINNED_SYNC, 3
    end
    add_message "lnrpc.TimestampedError" do
      optional :timestamp, :uint64, 1
      optional :error, :string, 2
    end
    add_message "lnrpc.ListPeersRequest" do
      optional :latest_error, :bool, 1
    end
    add_message "lnrpc.ListPeersResponse" do
      repeated :peers, :message, 1, "lnrpc.Peer"
    end
    add_message "lnrpc.PeerEventSubscription" do
    end
    add_message "lnrpc.PeerEvent" do
      optional :pub_key, :string, 1
      optional :type, :enum, 2, "lnrpc.PeerEvent.EventType"
    end
    add_enum "lnrpc.PeerEvent.EventType" do
      value :PEER_ONLINE, 0
      value :PEER_OFFLINE, 1
    end
    add_message "lnrpc.GetInfoRequest" do
    end
    add_message "lnrpc.GetInfoResponse" do
      optional :version, :string, 14
      optional :commit_hash, :string, 20
      optional :identity_pubkey, :string, 1
      optional :alias, :string, 2
      optional :color, :string, 17
      optional :num_pending_channels, :uint32, 3
      optional :num_active_channels, :uint32, 4
      optional :num_inactive_channels, :uint32, 15
      optional :num_peers, :uint32, 5
      optional :block_height, :uint32, 6
      optional :block_hash, :string, 8
      optional :best_header_timestamp, :int64, 13
      optional :synced_to_chain, :bool, 9
      optional :synced_to_graph, :bool, 18
      optional :testnet, :bool, 10
      repeated :chains, :message, 16, "lnrpc.Chain"
      repeated :uris, :string, 12
      map :features, :uint32, :message, 19, "lnrpc.Feature"
      optional :require_htlc_interceptor, :bool, 21
    end
    add_message "lnrpc.GetRecoveryInfoRequest" do
    end
    add_message "lnrpc.GetRecoveryInfoResponse" do
      optional :recovery_mode, :bool, 1
      optional :recovery_finished, :bool, 2
      optional :progress, :double, 3
    end
    add_message "lnrpc.Chain" do
      optional :chain, :string, 1
      optional :network, :string, 2
    end
    add_message "lnrpc.ConfirmationUpdate" do
      optional :block_sha, :bytes, 1
      optional :block_height, :int32, 2
      optional :num_confs_left, :uint32, 3
    end
    add_message "lnrpc.ChannelOpenUpdate" do
      optional :channel_point, :message, 1, "lnrpc.ChannelPoint"
    end
    add_message "lnrpc.ChannelCloseUpdate" do
      optional :closing_txid, :bytes, 1
      optional :success, :bool, 2
    end
    add_message "lnrpc.CloseChannelRequest" do
      optional :channel_point, :message, 1, "lnrpc.ChannelPoint"
      optional :force, :bool, 2
      optional :target_conf, :int32, 3
      optional :sat_per_byte, :int64, 4
      optional :delivery_address, :string, 5
      optional :sat_per_vbyte, :uint64, 6
      optional :max_fee_per_vbyte, :uint64, 7
    end
    add_message "lnrpc.CloseStatusUpdate" do
      oneof :update do
        optional :close_pending, :message, 1, "lnrpc.PendingUpdate"
        optional :chan_close, :message, 3, "lnrpc.ChannelCloseUpdate"
      end
    end
    add_message "lnrpc.PendingUpdate" do
      optional :txid, :bytes, 1
      optional :output_index, :uint32, 2
    end
    add_message "lnrpc.ReadyForPsbtFunding" do
      optional :funding_address, :string, 1
      optional :funding_amount, :int64, 2
      optional :psbt, :bytes, 3
    end
    add_message "lnrpc.BatchOpenChannelRequest" do
      repeated :channels, :message, 1, "lnrpc.BatchOpenChannel"
      optional :target_conf, :int32, 2
      optional :sat_per_vbyte, :int64, 3
      optional :min_confs, :int32, 4
      optional :spend_unconfirmed, :bool, 5
      optional :label, :string, 6
    end
    add_message "lnrpc.BatchOpenChannel" do
      optional :node_pubkey, :bytes, 1
      optional :local_funding_amount, :int64, 2
      optional :push_sat, :int64, 3
      optional :private, :bool, 4
      optional :min_htlc_msat, :int64, 5
      optional :remote_csv_delay, :uint32, 6
      optional :close_address, :string, 7
      optional :pending_chan_id, :bytes, 8
      optional :commitment_type, :enum, 9, "lnrpc.CommitmentType"
    end
    add_message "lnrpc.BatchOpenChannelResponse" do
      repeated :pending_channels, :message, 1, "lnrpc.PendingUpdate"
    end
    add_message "lnrpc.OpenChannelRequest" do
      optional :sat_per_vbyte, :uint64, 1
      optional :node_pubkey, :bytes, 2
      optional :node_pubkey_string, :string, 3
      optional :local_funding_amount, :int64, 4
      optional :push_sat, :int64, 5
      optional :target_conf, :int32, 6
      optional :sat_per_byte, :int64, 7
      optional :private, :bool, 8
      optional :min_htlc_msat, :int64, 9
      optional :remote_csv_delay, :uint32, 10
      optional :min_confs, :int32, 11
      optional :spend_unconfirmed, :bool, 12
      optional :close_address, :string, 13
      optional :funding_shim, :message, 14, "lnrpc.FundingShim"
      optional :remote_max_value_in_flight_msat, :uint64, 15
      optional :remote_max_htlcs, :uint32, 16
      optional :max_local_csv, :uint32, 17
      optional :commitment_type, :enum, 18, "lnrpc.CommitmentType"
      optional :zero_conf, :bool, 19
      optional :scid_alias, :bool, 20
    end
    add_message "lnrpc.OpenStatusUpdate" do
      optional :pending_chan_id, :bytes, 4
      oneof :update do
        optional :chan_pending, :message, 1, "lnrpc.PendingUpdate"
        optional :chan_open, :message, 3, "lnrpc.ChannelOpenUpdate"
        optional :psbt_fund, :message, 5, "lnrpc.ReadyForPsbtFunding"
      end
    end
    add_message "lnrpc.KeyLocator" do
      optional :key_family, :int32, 1
      optional :key_index, :int32, 2
    end
    add_message "lnrpc.KeyDescriptor" do
      optional :raw_key_bytes, :bytes, 1
      optional :key_loc, :message, 2, "lnrpc.KeyLocator"
    end
    add_message "lnrpc.ChanPointShim" do
      optional :amt, :int64, 1
      optional :chan_point, :message, 2, "lnrpc.ChannelPoint"
      optional :local_key, :message, 3, "lnrpc.KeyDescriptor"
      optional :remote_key, :bytes, 4
      optional :pending_chan_id, :bytes, 5
      optional :thaw_height, :uint32, 6
    end
    add_message "lnrpc.PsbtShim" do
      optional :pending_chan_id, :bytes, 1
      optional :base_psbt, :bytes, 2
      optional :no_publish, :bool, 3
    end
    add_message "lnrpc.FundingShim" do
      oneof :shim do
        optional :chan_point_shim, :message, 1, "lnrpc.ChanPointShim"
        optional :psbt_shim, :message, 2, "lnrpc.PsbtShim"
      end
    end
    add_message "lnrpc.FundingShimCancel" do
      optional :pending_chan_id, :bytes, 1
    end
    add_message "lnrpc.FundingPsbtVerify" do
      optional :funded_psbt, :bytes, 1
      optional :pending_chan_id, :bytes, 2
      optional :skip_finalize, :bool, 3
    end
    add_message "lnrpc.FundingPsbtFinalize" do
      optional :signed_psbt, :bytes, 1
      optional :pending_chan_id, :bytes, 2
      optional :final_raw_tx, :bytes, 3
    end
    add_message "lnrpc.FundingTransitionMsg" do
      oneof :trigger do
        optional :shim_register, :message, 1, "lnrpc.FundingShim"
        optional :shim_cancel, :message, 2, "lnrpc.FundingShimCancel"
        optional :psbt_verify, :message, 3, "lnrpc.FundingPsbtVerify"
        optional :psbt_finalize, :message, 4, "lnrpc.FundingPsbtFinalize"
      end
    end
    add_message "lnrpc.FundingStateStepResp" do
    end
    add_message "lnrpc.PendingHTLC" do
      optional :incoming, :bool, 1
      optional :amount, :int64, 2
      optional :outpoint, :string, 3
      optional :maturity_height, :uint32, 4
      optional :blocks_til_maturity, :int32, 5
      optional :stage, :uint32, 6
    end
    add_message "lnrpc.PendingChannelsRequest" do
    end
    add_message "lnrpc.PendingChannelsResponse" do
      optional :total_limbo_balance, :int64, 1
      repeated :pending_open_channels, :message, 2, "lnrpc.PendingChannelsResponse.PendingOpenChannel"
      repeated :pending_closing_channels, :message, 3, "lnrpc.PendingChannelsResponse.ClosedChannel"
      repeated :pending_force_closing_channels, :message, 4, "lnrpc.PendingChannelsResponse.ForceClosedChannel"
      repeated :waiting_close_channels, :message, 5, "lnrpc.PendingChannelsResponse.WaitingCloseChannel"
    end
    add_message "lnrpc.PendingChannelsResponse.PendingChannel" do
      optional :remote_node_pub, :string, 1
      optional :channel_point, :string, 2
      optional :capacity, :int64, 3
      optional :local_balance, :int64, 4
      optional :remote_balance, :int64, 5
      optional :local_chan_reserve_sat, :int64, 6
      optional :remote_chan_reserve_sat, :int64, 7
      optional :initiator, :enum, 8, "lnrpc.Initiator"
      optional :commitment_type, :enum, 9, "lnrpc.CommitmentType"
      optional :num_forwarding_packages, :int64, 10
      optional :chan_status_flags, :string, 11
      optional :private, :bool, 12
    end
    add_message "lnrpc.PendingChannelsResponse.PendingOpenChannel" do
      optional :channel, :message, 1, "lnrpc.PendingChannelsResponse.PendingChannel"
      optional :commit_fee, :int64, 4
      optional :commit_weight, :int64, 5
      optional :fee_per_kw, :int64, 6
    end
    add_message "lnrpc.PendingChannelsResponse.WaitingCloseChannel" do
      optional :channel, :message, 1, "lnrpc.PendingChannelsResponse.PendingChannel"
      optional :limbo_balance, :int64, 2
      optional :commitments, :message, 3, "lnrpc.PendingChannelsResponse.Commitments"
      optional :closing_txid, :string, 4
    end
    add_message "lnrpc.PendingChannelsResponse.Commitments" do
      optional :local_txid, :string, 1
      optional :remote_txid, :string, 2
      optional :remote_pending_txid, :string, 3
      optional :local_commit_fee_sat, :uint64, 4
      optional :remote_commit_fee_sat, :uint64, 5
      optional :remote_pending_commit_fee_sat, :uint64, 6
    end
    add_message "lnrpc.PendingChannelsResponse.ClosedChannel" do
      optional :channel, :message, 1, "lnrpc.PendingChannelsResponse.PendingChannel"
      optional :closing_txid, :string, 2
    end
    add_message "lnrpc.PendingChannelsResponse.ForceClosedChannel" do
      optional :channel, :message, 1, "lnrpc.PendingChannelsResponse.PendingChannel"
      optional :closing_txid, :string, 2
      optional :limbo_balance, :int64, 3
      optional :maturity_height, :uint32, 4
      optional :blocks_til_maturity, :int32, 5
      optional :recovered_balance, :int64, 6
      repeated :pending_htlcs, :message, 8, "lnrpc.PendingHTLC"
      optional :anchor, :enum, 9, "lnrpc.PendingChannelsResponse.ForceClosedChannel.AnchorState"
    end
    add_enum "lnrpc.PendingChannelsResponse.ForceClosedChannel.AnchorState" do
      value :LIMBO, 0
      value :RECOVERED, 1
      value :LOST, 2
    end
    add_message "lnrpc.ChannelEventSubscription" do
    end
    add_message "lnrpc.ChannelEventUpdate" do
      optional :type, :enum, 5, "lnrpc.ChannelEventUpdate.UpdateType"
      oneof :channel do
        optional :open_channel, :message, 1, "lnrpc.Channel"
        optional :closed_channel, :message, 2, "lnrpc.ChannelCloseSummary"
        optional :active_channel, :message, 3, "lnrpc.ChannelPoint"
        optional :inactive_channel, :message, 4, "lnrpc.ChannelPoint"
        optional :pending_open_channel, :message, 6, "lnrpc.PendingUpdate"
        optional :fully_resolved_channel, :message, 7, "lnrpc.ChannelPoint"
      end
    end
    add_enum "lnrpc.ChannelEventUpdate.UpdateType" do
      value :OPEN_CHANNEL, 0
      value :CLOSED_CHANNEL, 1
      value :ACTIVE_CHANNEL, 2
      value :INACTIVE_CHANNEL, 3
      value :PENDING_OPEN_CHANNEL, 4
      value :FULLY_RESOLVED_CHANNEL, 5
    end
    add_message "lnrpc.WalletAccountBalance" do
      optional :confirmed_balance, :int64, 1
      optional :unconfirmed_balance, :int64, 2
    end
    add_message "lnrpc.WalletBalanceRequest" do
    end
    add_message "lnrpc.WalletBalanceResponse" do
      optional :total_balance, :int64, 1
      optional :confirmed_balance, :int64, 2
      optional :unconfirmed_balance, :int64, 3
      optional :locked_balance, :int64, 5
      optional :reserved_balance_anchor_chan, :int64, 6
      map :account_balance, :string, :message, 4, "lnrpc.WalletAccountBalance"
    end
    add_message "lnrpc.Amount" do
      optional :sat, :uint64, 1
      optional :msat, :uint64, 2
    end
    add_message "lnrpc.ChannelBalanceRequest" do
    end
    add_message "lnrpc.ChannelBalanceResponse" do
      optional :balance, :int64, 1
      optional :pending_open_balance, :int64, 2
      optional :local_balance, :message, 3, "lnrpc.Amount"
      optional :remote_balance, :message, 4, "lnrpc.Amount"
      optional :unsettled_local_balance, :message, 5, "lnrpc.Amount"
      optional :unsettled_remote_balance, :message, 6, "lnrpc.Amount"
      optional :pending_open_local_balance, :message, 7, "lnrpc.Amount"
      optional :pending_open_remote_balance, :message, 8, "lnrpc.Amount"
    end
    add_message "lnrpc.QueryRoutesRequest" do
      optional :pub_key, :string, 1
      optional :amt, :int64, 2
      optional :amt_msat, :int64, 12
      optional :final_cltv_delta, :int32, 4
      optional :fee_limit, :message, 5, "lnrpc.FeeLimit"
      repeated :ignored_nodes, :bytes, 6
      repeated :ignored_edges, :message, 7, "lnrpc.EdgeLocator"
      optional :source_pub_key, :string, 8
      optional :use_mission_control, :bool, 9
      repeated :ignored_pairs, :message, 10, "lnrpc.NodePair"
      optional :cltv_limit, :uint32, 11
      map :dest_custom_records, :uint64, :bytes, 13
      optional :outgoing_chan_id, :uint64, 14
      optional :last_hop_pubkey, :bytes, 15
      repeated :route_hints, :message, 16, "lnrpc.RouteHint"
      repeated :dest_features, :enum, 17, "lnrpc.FeatureBit"
      optional :time_pref, :double, 18
    end
    add_message "lnrpc.NodePair" do
      optional :from, :bytes, 1
      optional :to, :bytes, 2
    end
    add_message "lnrpc.EdgeLocator" do
      optional :channel_id, :uint64, 1
      optional :direction_reverse, :bool, 2
    end
    add_message "lnrpc.QueryRoutesResponse" do
      repeated :routes, :message, 1, "lnrpc.Route"
      optional :success_prob, :double, 2
    end
    add_message "lnrpc.Hop" do
      optional :chan_id, :uint64, 1
      optional :chan_capacity, :int64, 2
      optional :amt_to_forward, :int64, 3
      optional :fee, :int64, 4
      optional :expiry, :uint32, 5
      optional :amt_to_forward_msat, :int64, 6
      optional :fee_msat, :int64, 7
      optional :pub_key, :string, 8
      optional :tlv_payload, :bool, 9
      optional :mpp_record, :message, 10, "lnrpc.MPPRecord"
      optional :amp_record, :message, 12, "lnrpc.AMPRecord"
      map :custom_records, :uint64, :bytes, 11
      optional :metadata, :bytes, 13
    end
    add_message "lnrpc.MPPRecord" do
      optional :payment_addr, :bytes, 11
      optional :total_amt_msat, :int64, 10
    end
    add_message "lnrpc.AMPRecord" do
      optional :root_share, :bytes, 1
      optional :set_id, :bytes, 2
      optional :child_index, :uint32, 3
    end
    add_message "lnrpc.Route" do
      optional :total_time_lock, :uint32, 1
      optional :total_fees, :int64, 2
      optional :total_amt, :int64, 3
      repeated :hops, :message, 4, "lnrpc.Hop"
      optional :total_fees_msat, :int64, 5
      optional :total_amt_msat, :int64, 6
    end
    add_message "lnrpc.NodeInfoRequest" do
      optional :pub_key, :string, 1
      optional :include_channels, :bool, 2
    end
    add_message "lnrpc.NodeInfo" do
      optional :node, :message, 1, "lnrpc.LightningNode"
      optional :num_channels, :uint32, 2
      optional :total_capacity, :int64, 3
      repeated :channels, :message, 4, "lnrpc.ChannelEdge"
    end
    add_message "lnrpc.LightningNode" do
      optional :last_update, :uint32, 1
      optional :pub_key, :string, 2
      optional :alias, :string, 3
      repeated :addresses, :message, 4, "lnrpc.NodeAddress"
      optional :color, :string, 5
      map :features, :uint32, :message, 6, "lnrpc.Feature"
    end
    add_message "lnrpc.NodeAddress" do
      optional :network, :string, 1
      optional :addr, :string, 2
    end
    add_message "lnrpc.RoutingPolicy" do
      optional :time_lock_delta, :uint32, 1
      optional :min_htlc, :int64, 2
      optional :fee_base_msat, :int64, 3
      optional :fee_rate_milli_msat, :int64, 4
      optional :disabled, :bool, 5
      optional :max_htlc_msat, :uint64, 6
      optional :last_update, :uint32, 7
    end
    add_message "lnrpc.ChannelEdge" do
      optional :channel_id, :uint64, 1
      optional :chan_point, :string, 2
      optional :last_update, :uint32, 3
      optional :node1_pub, :string, 4
      optional :node2_pub, :string, 5
      optional :capacity, :int64, 6
      optional :node1_policy, :message, 7, "lnrpc.RoutingPolicy"
      optional :node2_policy, :message, 8, "lnrpc.RoutingPolicy"
    end
    add_message "lnrpc.ChannelGraphRequest" do
      optional :include_unannounced, :bool, 1
    end
    add_message "lnrpc.ChannelGraph" do
      repeated :nodes, :message, 1, "lnrpc.LightningNode"
      repeated :edges, :message, 2, "lnrpc.ChannelEdge"
    end
    add_message "lnrpc.NodeMetricsRequest" do
      repeated :types, :enum, 1, "lnrpc.NodeMetricType"
    end
    add_message "lnrpc.NodeMetricsResponse" do
      map :betweenness_centrality, :string, :message, 1, "lnrpc.FloatMetric"
    end
    add_message "lnrpc.FloatMetric" do
      optional :value, :double, 1
      optional :normalized_value, :double, 2
    end
    add_message "lnrpc.ChanInfoRequest" do
      optional :chan_id, :uint64, 1
    end
    add_message "lnrpc.NetworkInfoRequest" do
    end
    add_message "lnrpc.NetworkInfo" do
      optional :graph_diameter, :uint32, 1
      optional :avg_out_degree, :double, 2
      optional :max_out_degree, :uint32, 3
      optional :num_nodes, :uint32, 4
      optional :num_channels, :uint32, 5
      optional :total_network_capacity, :int64, 6
      optional :avg_channel_size, :double, 7
      optional :min_channel_size, :int64, 8
      optional :max_channel_size, :int64, 9
      optional :median_channel_size_sat, :int64, 10
      optional :num_zombie_chans, :uint64, 11
    end
    add_message "lnrpc.StopRequest" do
    end
    add_message "lnrpc.StopResponse" do
    end
    add_message "lnrpc.GraphTopologySubscription" do
    end
    add_message "lnrpc.GraphTopologyUpdate" do
      repeated :node_updates, :message, 1, "lnrpc.NodeUpdate"
      repeated :channel_updates, :message, 2, "lnrpc.ChannelEdgeUpdate"
      repeated :closed_chans, :message, 3, "lnrpc.ClosedChannelUpdate"
    end
    add_message "lnrpc.NodeUpdate" do
      repeated :addresses, :string, 1
      optional :identity_key, :string, 2
      optional :global_features, :bytes, 3
      optional :alias, :string, 4
      optional :color, :string, 5
      repeated :node_addresses, :message, 7, "lnrpc.NodeAddress"
      map :features, :uint32, :message, 6, "lnrpc.Feature"
    end
    add_message "lnrpc.ChannelEdgeUpdate" do
      optional :chan_id, :uint64, 1
      optional :chan_point, :message, 2, "lnrpc.ChannelPoint"
      optional :capacity, :int64, 3
      optional :routing_policy, :message, 4, "lnrpc.RoutingPolicy"
      optional :advertising_node, :string, 5
      optional :connecting_node, :string, 6
    end
    add_message "lnrpc.ClosedChannelUpdate" do
      optional :chan_id, :uint64, 1
      optional :capacity, :int64, 2
      optional :closed_height, :uint32, 3
      optional :chan_point, :message, 4, "lnrpc.ChannelPoint"
    end
    add_message "lnrpc.HopHint" do
      optional :node_id, :string, 1
      optional :chan_id, :uint64, 2
      optional :fee_base_msat, :uint32, 3
      optional :fee_proportional_millionths, :uint32, 4
      optional :cltv_expiry_delta, :uint32, 5
    end
    add_message "lnrpc.SetID" do
      optional :set_id, :bytes, 1
    end
    add_message "lnrpc.RouteHint" do
      repeated :hop_hints, :message, 1, "lnrpc.HopHint"
    end
    add_message "lnrpc.AMPInvoiceState" do
      optional :state, :enum, 1, "lnrpc.InvoiceHTLCState"
      optional :settle_index, :uint64, 2
      optional :settle_time, :int64, 3
      optional :amt_paid_msat, :int64, 5
    end
    add_message "lnrpc.Invoice" do
      optional :memo, :string, 1
      optional :r_preimage, :bytes, 3
      optional :r_hash, :bytes, 4
      optional :value, :int64, 5
      optional :value_msat, :int64, 23
      optional :settled, :bool, 6
      optional :creation_date, :int64, 7
      optional :settle_date, :int64, 8
      optional :payment_request, :string, 9
      optional :description_hash, :bytes, 10
      optional :expiry, :int64, 11
      optional :fallback_addr, :string, 12
      optional :cltv_expiry, :uint64, 13
      repeated :route_hints, :message, 14, "lnrpc.RouteHint"
      optional :private, :bool, 15
      optional :add_index, :uint64, 16
      optional :settle_index, :uint64, 17
      optional :amt_paid, :int64, 18
      optional :amt_paid_sat, :int64, 19
      optional :amt_paid_msat, :int64, 20
      optional :state, :enum, 21, "lnrpc.Invoice.InvoiceState"
      repeated :htlcs, :message, 22, "lnrpc.InvoiceHTLC"
      map :features, :uint32, :message, 24, "lnrpc.Feature"
      optional :is_keysend, :bool, 25
      optional :payment_addr, :bytes, 26
      optional :is_amp, :bool, 27
      map :amp_invoice_state, :string, :message, 28, "lnrpc.AMPInvoiceState"
    end
    add_enum "lnrpc.Invoice.InvoiceState" do
      value :OPEN, 0
      value :SETTLED, 1
      value :CANCELED, 2
      value :ACCEPTED, 3
    end
    add_message "lnrpc.InvoiceHTLC" do
      optional :chan_id, :uint64, 1
      optional :htlc_index, :uint64, 2
      optional :amt_msat, :uint64, 3
      optional :accept_height, :int32, 4
      optional :accept_time, :int64, 5
      optional :resolve_time, :int64, 6
      optional :expiry_height, :int32, 7
      optional :state, :enum, 8, "lnrpc.InvoiceHTLCState"
      map :custom_records, :uint64, :bytes, 9
      optional :mpp_total_amt_msat, :uint64, 10
      optional :amp, :message, 11, "lnrpc.AMP"
    end
    add_message "lnrpc.AMP" do
      optional :root_share, :bytes, 1
      optional :set_id, :bytes, 2
      optional :child_index, :uint32, 3
      optional :hash, :bytes, 4
      optional :preimage, :bytes, 5
    end
    add_message "lnrpc.AddInvoiceResponse" do
      optional :r_hash, :bytes, 1
      optional :payment_request, :string, 2
      optional :add_index, :uint64, 16
      optional :payment_addr, :bytes, 17
    end
    add_message "lnrpc.PaymentHash" do
      optional :r_hash_str, :string, 1
      optional :r_hash, :bytes, 2
    end
    add_message "lnrpc.ListInvoiceRequest" do
      optional :pending_only, :bool, 1
      optional :index_offset, :uint64, 4
      optional :num_max_invoices, :uint64, 5
      optional :reversed, :bool, 6
    end
    add_message "lnrpc.ListInvoiceResponse" do
      repeated :invoices, :message, 1, "lnrpc.Invoice"
      optional :last_index_offset, :uint64, 2
      optional :first_index_offset, :uint64, 3
    end
    add_message "lnrpc.InvoiceSubscription" do
      optional :add_index, :uint64, 1
      optional :settle_index, :uint64, 2
    end
    add_message "lnrpc.Payment" do
      optional :payment_hash, :string, 1
      optional :value, :int64, 2
      optional :creation_date, :int64, 3
      optional :fee, :int64, 5
      optional :payment_preimage, :string, 6
      optional :value_sat, :int64, 7
      optional :value_msat, :int64, 8
      optional :payment_request, :string, 9
      optional :status, :enum, 10, "lnrpc.Payment.PaymentStatus"
      optional :fee_sat, :int64, 11
      optional :fee_msat, :int64, 12
      optional :creation_time_ns, :int64, 13
      repeated :htlcs, :message, 14, "lnrpc.HTLCAttempt"
      optional :payment_index, :uint64, 15
      optional :failure_reason, :enum, 16, "lnrpc.PaymentFailureReason"
    end
    add_enum "lnrpc.Payment.PaymentStatus" do
      value :UNKNOWN, 0
      value :IN_FLIGHT, 1
      value :SUCCEEDED, 2
      value :FAILED, 3
    end
    add_message "lnrpc.HTLCAttempt" do
      optional :attempt_id, :uint64, 7
      optional :status, :enum, 1, "lnrpc.HTLCAttempt.HTLCStatus"
      optional :route, :message, 2, "lnrpc.Route"
      optional :attempt_time_ns, :int64, 3
      optional :resolve_time_ns, :int64, 4
      optional :failure, :message, 5, "lnrpc.Failure"
      optional :preimage, :bytes, 6
    end
    add_enum "lnrpc.HTLCAttempt.HTLCStatus" do
      value :IN_FLIGHT, 0
      value :SUCCEEDED, 1
      value :FAILED, 2
    end
    add_message "lnrpc.ListPaymentsRequest" do
      optional :include_incomplete, :bool, 1
      optional :index_offset, :uint64, 2
      optional :max_payments, :uint64, 3
      optional :reversed, :bool, 4
      optional :count_total_payments, :bool, 5
    end
    add_message "lnrpc.ListPaymentsResponse" do
      repeated :payments, :message, 1, "lnrpc.Payment"
      optional :first_index_offset, :uint64, 2
      optional :last_index_offset, :uint64, 3
      optional :total_num_payments, :uint64, 4
    end
    add_message "lnrpc.DeletePaymentRequest" do
      optional :payment_hash, :bytes, 1
      optional :failed_htlcs_only, :bool, 2
    end
    add_message "lnrpc.DeleteAllPaymentsRequest" do
      optional :failed_payments_only, :bool, 1
      optional :failed_htlcs_only, :bool, 2
    end
    add_message "lnrpc.DeletePaymentResponse" do
    end
    add_message "lnrpc.DeleteAllPaymentsResponse" do
    end
    add_message "lnrpc.AbandonChannelRequest" do
      optional :channel_point, :message, 1, "lnrpc.ChannelPoint"
      optional :pending_funding_shim_only, :bool, 2
      optional :i_know_what_i_am_doing, :bool, 3
    end
    add_message "lnrpc.AbandonChannelResponse" do
    end
    add_message "lnrpc.DebugLevelRequest" do
      optional :show, :bool, 1
      optional :level_spec, :string, 2
    end
    add_message "lnrpc.DebugLevelResponse" do
      optional :sub_systems, :string, 1
    end
    add_message "lnrpc.PayReqString" do
      optional :pay_req, :string, 1
    end
    add_message "lnrpc.PayReq" do
      optional :destination, :string, 1
      optional :payment_hash, :string, 2
      optional :num_satoshis, :int64, 3
      optional :timestamp, :int64, 4
      optional :expiry, :int64, 5
      optional :description, :string, 6
      optional :description_hash, :string, 7
      optional :fallback_addr, :string, 8
      optional :cltv_expiry, :int64, 9
      repeated :route_hints, :message, 10, "lnrpc.RouteHint"
      optional :payment_addr, :bytes, 11
      optional :num_msat, :int64, 12
      map :features, :uint32, :message, 13, "lnrpc.Feature"
    end
    add_message "lnrpc.Feature" do
      optional :name, :string, 2
      optional :is_required, :bool, 3
      optional :is_known, :bool, 4
    end
    add_message "lnrpc.FeeReportRequest" do
    end
    add_message "lnrpc.ChannelFeeReport" do
      optional :chan_id, :uint64, 5
      optional :channel_point, :string, 1
      optional :base_fee_msat, :int64, 2
      optional :fee_per_mil, :int64, 3
      optional :fee_rate, :double, 4
    end
    add_message "lnrpc.FeeReportResponse" do
      repeated :channel_fees, :message, 1, "lnrpc.ChannelFeeReport"
      optional :day_fee_sum, :uint64, 2
      optional :week_fee_sum, :uint64, 3
      optional :month_fee_sum, :uint64, 4
    end
    add_message "lnrpc.PolicyUpdateRequest" do
      optional :base_fee_msat, :int64, 3
      optional :fee_rate, :double, 4
      optional :fee_rate_ppm, :uint32, 9
      optional :time_lock_delta, :uint32, 5
      optional :max_htlc_msat, :uint64, 6
      optional :min_htlc_msat, :uint64, 7
      optional :min_htlc_msat_specified, :bool, 8
      oneof :scope do
        optional :global, :bool, 1
        optional :chan_point, :message, 2, "lnrpc.ChannelPoint"
      end
    end
    add_message "lnrpc.FailedUpdate" do
      optional :outpoint, :message, 1, "lnrpc.OutPoint"
      optional :reason, :enum, 2, "lnrpc.UpdateFailure"
      optional :update_error, :string, 3
    end
    add_message "lnrpc.PolicyUpdateResponse" do
      repeated :failed_updates, :message, 1, "lnrpc.FailedUpdate"
    end
    add_message "lnrpc.ForwardingHistoryRequest" do
      optional :start_time, :uint64, 1
      optional :end_time, :uint64, 2
      optional :index_offset, :uint32, 3
      optional :num_max_events, :uint32, 4
    end
    add_message "lnrpc.ForwardingEvent" do
      optional :timestamp, :uint64, 1
      optional :chan_id_in, :uint64, 2
      optional :chan_id_out, :uint64, 4
      optional :amt_in, :uint64, 5
      optional :amt_out, :uint64, 6
      optional :fee, :uint64, 7
      optional :fee_msat, :uint64, 8
      optional :amt_in_msat, :uint64, 9
      optional :amt_out_msat, :uint64, 10
      optional :timestamp_ns, :uint64, 11
    end
    add_message "lnrpc.ForwardingHistoryResponse" do
      repeated :forwarding_events, :message, 1, "lnrpc.ForwardingEvent"
      optional :last_offset_index, :uint32, 2
    end
    add_message "lnrpc.ExportChannelBackupRequest" do
      optional :chan_point, :message, 1, "lnrpc.ChannelPoint"
    end
    add_message "lnrpc.ChannelBackup" do
      optional :chan_point, :message, 1, "lnrpc.ChannelPoint"
      optional :chan_backup, :bytes, 2
    end
    add_message "lnrpc.MultiChanBackup" do
      repeated :chan_points, :message, 1, "lnrpc.ChannelPoint"
      optional :multi_chan_backup, :bytes, 2
    end
    add_message "lnrpc.ChanBackupExportRequest" do
    end
    add_message "lnrpc.ChanBackupSnapshot" do
      optional :single_chan_backups, :message, 1, "lnrpc.ChannelBackups"
      optional :multi_chan_backup, :message, 2, "lnrpc.MultiChanBackup"
    end
    add_message "lnrpc.ChannelBackups" do
      repeated :chan_backups, :message, 1, "lnrpc.ChannelBackup"
    end
    add_message "lnrpc.RestoreChanBackupRequest" do
      oneof :backup do
        optional :chan_backups, :message, 1, "lnrpc.ChannelBackups"
        optional :multi_chan_backup, :bytes, 2
      end
    end
    add_message "lnrpc.RestoreBackupResponse" do
    end
    add_message "lnrpc.ChannelBackupSubscription" do
    end
    add_message "lnrpc.VerifyChanBackupResponse" do
    end
    add_message "lnrpc.MacaroonPermission" do
      optional :entity, :string, 1
      optional :action, :string, 2
    end
    add_message "lnrpc.BakeMacaroonRequest" do
      repeated :permissions, :message, 1, "lnrpc.MacaroonPermission"
      optional :root_key_id, :uint64, 2
      optional :allow_external_permissions, :bool, 3
    end
    add_message "lnrpc.BakeMacaroonResponse" do
      optional :macaroon, :string, 1
    end
    add_message "lnrpc.ListMacaroonIDsRequest" do
    end
    add_message "lnrpc.ListMacaroonIDsResponse" do
      repeated :root_key_ids, :uint64, 1
    end
    add_message "lnrpc.DeleteMacaroonIDRequest" do
      optional :root_key_id, :uint64, 1
    end
    add_message "lnrpc.DeleteMacaroonIDResponse" do
      optional :deleted, :bool, 1
    end
    add_message "lnrpc.MacaroonPermissionList" do
      repeated :permissions, :message, 1, "lnrpc.MacaroonPermission"
    end
    add_message "lnrpc.ListPermissionsRequest" do
    end
    add_message "lnrpc.ListPermissionsResponse" do
      map :method_permissions, :string, :message, 1, "lnrpc.MacaroonPermissionList"
    end
    add_message "lnrpc.Failure" do
      optional :code, :enum, 1, "lnrpc.Failure.FailureCode"
      optional :channel_update, :message, 3, "lnrpc.ChannelUpdate"
      optional :htlc_msat, :uint64, 4
      optional :onion_sha_256, :bytes, 5
      optional :cltv_expiry, :uint32, 6
      optional :flags, :uint32, 7
      optional :failure_source_index, :uint32, 8
      optional :height, :uint32, 9
    end
    add_enum "lnrpc.Failure.FailureCode" do
      value :RESERVED, 0
      value :INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS, 1
      value :INCORRECT_PAYMENT_AMOUNT, 2
      value :FINAL_INCORRECT_CLTV_EXPIRY, 3
      value :FINAL_INCORRECT_HTLC_AMOUNT, 4
      value :FINAL_EXPIRY_TOO_SOON, 5
      value :INVALID_REALM, 6
      value :EXPIRY_TOO_SOON, 7
      value :INVALID_ONION_VERSION, 8
      value :INVALID_ONION_HMAC, 9
      value :INVALID_ONION_KEY, 10
      value :AMOUNT_BELOW_MINIMUM, 11
      value :FEE_INSUFFICIENT, 12
      value :INCORRECT_CLTV_EXPIRY, 13
      value :CHANNEL_DISABLED, 14
      value :TEMPORARY_CHANNEL_FAILURE, 15
      value :REQUIRED_NODE_FEATURE_MISSING, 16
      value :REQUIRED_CHANNEL_FEATURE_MISSING, 17
      value :UNKNOWN_NEXT_PEER, 18
      value :TEMPORARY_NODE_FAILURE, 19
      value :PERMANENT_NODE_FAILURE, 20
      value :PERMANENT_CHANNEL_FAILURE, 21
      value :EXPIRY_TOO_FAR, 22
      value :MPP_TIMEOUT, 23
      value :INVALID_ONION_PAYLOAD, 24
      value :INTERNAL_FAILURE, 997
      value :UNKNOWN_FAILURE, 998
      value :UNREADABLE_FAILURE, 999
    end
    add_message "lnrpc.ChannelUpdate" do
      optional :signature, :bytes, 1
      optional :chain_hash, :bytes, 2
      optional :chan_id, :uint64, 3
      optional :timestamp, :uint32, 4
      optional :message_flags, :uint32, 10
      optional :channel_flags, :uint32, 5
      optional :time_lock_delta, :uint32, 6
      optional :htlc_minimum_msat, :uint64, 7
      optional :base_fee, :uint32, 8
      optional :fee_rate, :uint32, 9
      optional :htlc_maximum_msat, :uint64, 11
      optional :extra_opaque_data, :bytes, 12
    end
    add_message "lnrpc.MacaroonId" do
      optional :nonce, :bytes, 1
      optional :storageId, :bytes, 2
      repeated :ops, :message, 3, "lnrpc.Op"
    end
    add_message "lnrpc.Op" do
      optional :entity, :string, 1
      repeated :actions, :string, 2
    end
    add_message "lnrpc.CheckMacPermRequest" do
      optional :macaroon, :bytes, 1
      repeated :permissions, :message, 2, "lnrpc.MacaroonPermission"
      optional :fullMethod, :string, 3
    end
    add_message "lnrpc.CheckMacPermResponse" do
      optional :valid, :bool, 1
    end
    add_message "lnrpc.RPCMiddlewareRequest" do
      optional :request_id, :uint64, 1
      optional :raw_macaroon, :bytes, 2
      optional :custom_caveat_condition, :string, 3
      optional :msg_id, :uint64, 7
      oneof :intercept_type do
        optional :stream_auth, :message, 4, "lnrpc.StreamAuth"
        optional :request, :message, 5, "lnrpc.RPCMessage"
        optional :response, :message, 6, "lnrpc.RPCMessage"
        optional :reg_complete, :bool, 8
      end
    end
    add_message "lnrpc.StreamAuth" do
      optional :method_full_uri, :string, 1
    end
    add_message "lnrpc.RPCMessage" do
      optional :method_full_uri, :string, 1
      optional :stream_rpc, :bool, 2
      optional :type_name, :string, 3
      optional :serialized, :bytes, 4
      optional :is_error, :bool, 5
    end
    add_message "lnrpc.RPCMiddlewareResponse" do
      optional :ref_msg_id, :uint64, 1
      oneof :middleware_message do
        optional :register, :message, 2, "lnrpc.MiddlewareRegistration"
        optional :feedback, :message, 3, "lnrpc.InterceptFeedback"
      end
    end
    add_message "lnrpc.MiddlewareRegistration" do
      optional :middleware_name, :string, 1
      optional :custom_macaroon_caveat_name, :string, 2
      optional :read_only_mode, :bool, 3
    end
    add_message "lnrpc.InterceptFeedback" do
      optional :error, :string, 1
      optional :replace_response, :bool, 2
      optional :replacement_serialized, :bytes, 3
    end
    add_enum "lnrpc.OutputScriptType" do
      value :SCRIPT_TYPE_PUBKEY_HASH, 0
      value :SCRIPT_TYPE_SCRIPT_HASH, 1
      value :SCRIPT_TYPE_WITNESS_V0_PUBKEY_HASH, 2
      value :SCRIPT_TYPE_WITNESS_V0_SCRIPT_HASH, 3
      value :SCRIPT_TYPE_PUBKEY, 4
      value :SCRIPT_TYPE_MULTISIG, 5
      value :SCRIPT_TYPE_NULLDATA, 6
      value :SCRIPT_TYPE_NON_STANDARD, 7
      value :SCRIPT_TYPE_WITNESS_UNKNOWN, 8
      value :SCRIPT_TYPE_WITNESS_V1_TAPROOT, 9
    end
    add_enum "lnrpc.AddressType" do
      value :WITNESS_PUBKEY_HASH, 0
      value :NESTED_PUBKEY_HASH, 1
      value :UNUSED_WITNESS_PUBKEY_HASH, 2
      value :UNUSED_NESTED_PUBKEY_HASH, 3
      value :TAPROOT_PUBKEY, 4
      value :UNUSED_TAPROOT_PUBKEY, 5
    end
    add_enum "lnrpc.CommitmentType" do
      value :UNKNOWN_COMMITMENT_TYPE, 0
      value :LEGACY, 1
      value :STATIC_REMOTE_KEY, 2
      value :ANCHORS, 3
      value :SCRIPT_ENFORCED_LEASE, 4
    end
    add_enum "lnrpc.Initiator" do
      value :INITIATOR_UNKNOWN, 0
      value :INITIATOR_LOCAL, 1
      value :INITIATOR_REMOTE, 2
      value :INITIATOR_BOTH, 3
    end
    add_enum "lnrpc.ResolutionType" do
      value :TYPE_UNKNOWN, 0
      value :ANCHOR, 1
      value :INCOMING_HTLC, 2
      value :OUTGOING_HTLC, 3
      value :COMMIT, 4
    end
    add_enum "lnrpc.ResolutionOutcome" do
      value :OUTCOME_UNKNOWN, 0
      value :CLAIMED, 1
      value :UNCLAIMED, 2
      value :ABANDONED, 3
      value :FIRST_STAGE, 4
      value :TIMEOUT, 5
    end
    add_enum "lnrpc.NodeMetricType" do
      value :UNKNOWN, 0
      value :BETWEENNESS_CENTRALITY, 1
    end
    add_enum "lnrpc.InvoiceHTLCState" do
      value :ACCEPTED, 0
      value :SETTLED, 1
      value :CANCELED, 2
    end
    add_enum "lnrpc.PaymentFailureReason" do
      value :FAILURE_REASON_NONE, 0
      value :FAILURE_REASON_TIMEOUT, 1
      value :FAILURE_REASON_NO_ROUTE, 2
      value :FAILURE_REASON_ERROR, 3
      value :FAILURE_REASON_INCORRECT_PAYMENT_DETAILS, 4
      value :FAILURE_REASON_INSUFFICIENT_BALANCE, 5
    end
    add_enum "lnrpc.FeatureBit" do
      value :DATALOSS_PROTECT_REQ, 0
      value :DATALOSS_PROTECT_OPT, 1
      value :INITIAL_ROUING_SYNC, 3
      value :UPFRONT_SHUTDOWN_SCRIPT_REQ, 4
      value :UPFRONT_SHUTDOWN_SCRIPT_OPT, 5
      value :GOSSIP_QUERIES_REQ, 6
      value :GOSSIP_QUERIES_OPT, 7
      value :TLV_ONION_REQ, 8
      value :TLV_ONION_OPT, 9
      value :EXT_GOSSIP_QUERIES_REQ, 10
      value :EXT_GOSSIP_QUERIES_OPT, 11
      value :STATIC_REMOTE_KEY_REQ, 12
      value :STATIC_REMOTE_KEY_OPT, 13
      value :PAYMENT_ADDR_REQ, 14
      value :PAYMENT_ADDR_OPT, 15
      value :MPP_REQ, 16
      value :MPP_OPT, 17
      value :WUMBO_CHANNELS_REQ, 18
      value :WUMBO_CHANNELS_OPT, 19
      value :ANCHORS_REQ, 20
      value :ANCHORS_OPT, 21
      value :ANCHORS_ZERO_FEE_HTLC_REQ, 22
      value :ANCHORS_ZERO_FEE_HTLC_OPT, 23
      value :AMP_REQ, 30
      value :AMP_OPT, 31
    end
    add_enum "lnrpc.UpdateFailure" do
      value :UPDATE_FAILURE_UNKNOWN, 0
      value :UPDATE_FAILURE_PENDING, 1
      value :UPDATE_FAILURE_NOT_FOUND, 2
      value :UPDATE_FAILURE_INTERNAL_ERR, 3
      value :UPDATE_FAILURE_INVALID_PARAMETER, 4
    end
  end
end

module Lnrpc
  SubscribeCustomMessagesRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SubscribeCustomMessagesRequest").msgclass
  CustomMessage = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.CustomMessage").msgclass
  SendCustomMessageRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SendCustomMessageRequest").msgclass
  SendCustomMessageResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SendCustomMessageResponse").msgclass
  Utxo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Utxo").msgclass
  OutputDetail = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.OutputDetail").msgclass
  Transaction = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Transaction").msgclass
  GetTransactionsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.GetTransactionsRequest").msgclass
  TransactionDetails = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.TransactionDetails").msgclass
  FeeLimit = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FeeLimit").msgclass
  SendRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SendRequest").msgclass
  SendResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SendResponse").msgclass
  SendToRouteRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SendToRouteRequest").msgclass
  ChannelAcceptRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelAcceptRequest").msgclass
  ChannelAcceptResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelAcceptResponse").msgclass
  ChannelPoint = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelPoint").msgclass
  OutPoint = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.OutPoint").msgclass
  PreviousOutPoint = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PreviousOutPoint").msgclass
  LightningAddress = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.LightningAddress").msgclass
  EstimateFeeRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.EstimateFeeRequest").msgclass
  EstimateFeeResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.EstimateFeeResponse").msgclass
  SendManyRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SendManyRequest").msgclass
  SendManyResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SendManyResponse").msgclass
  SendCoinsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SendCoinsRequest").msgclass
  SendCoinsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SendCoinsResponse").msgclass
  ListUnspentRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListUnspentRequest").msgclass
  ListUnspentResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListUnspentResponse").msgclass
  NewAddressRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NewAddressRequest").msgclass
  NewAddressResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NewAddressResponse").msgclass
  SignMessageRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SignMessageRequest").msgclass
  SignMessageResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SignMessageResponse").msgclass
  VerifyMessageRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.VerifyMessageRequest").msgclass
  VerifyMessageResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.VerifyMessageResponse").msgclass
  ConnectPeerRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ConnectPeerRequest").msgclass
  ConnectPeerResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ConnectPeerResponse").msgclass
  DisconnectPeerRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.DisconnectPeerRequest").msgclass
  DisconnectPeerResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.DisconnectPeerResponse").msgclass
  HTLC = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.HTLC").msgclass
  ChannelConstraints = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelConstraints").msgclass
  Channel = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Channel").msgclass
  ListChannelsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListChannelsRequest").msgclass
  ListChannelsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListChannelsResponse").msgclass
  AliasMap = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.AliasMap").msgclass
  ListAliasesRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListAliasesRequest").msgclass
  ListAliasesResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListAliasesResponse").msgclass
  ChannelCloseSummary = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelCloseSummary").msgclass
  ChannelCloseSummary::ClosureType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelCloseSummary.ClosureType").enummodule
  Resolution = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Resolution").msgclass
  ClosedChannelsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ClosedChannelsRequest").msgclass
  ClosedChannelsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ClosedChannelsResponse").msgclass
  Peer = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Peer").msgclass
  Peer::SyncType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Peer.SyncType").enummodule
  TimestampedError = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.TimestampedError").msgclass
  ListPeersRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListPeersRequest").msgclass
  ListPeersResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListPeersResponse").msgclass
  PeerEventSubscription = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PeerEventSubscription").msgclass
  PeerEvent = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PeerEvent").msgclass
  PeerEvent::EventType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PeerEvent.EventType").enummodule
  GetInfoRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.GetInfoRequest").msgclass
  GetInfoResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.GetInfoResponse").msgclass
  GetRecoveryInfoRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.GetRecoveryInfoRequest").msgclass
  GetRecoveryInfoResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.GetRecoveryInfoResponse").msgclass
  Chain = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Chain").msgclass
  ConfirmationUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ConfirmationUpdate").msgclass
  ChannelOpenUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelOpenUpdate").msgclass
  ChannelCloseUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelCloseUpdate").msgclass
  CloseChannelRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.CloseChannelRequest").msgclass
  CloseStatusUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.CloseStatusUpdate").msgclass
  PendingUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingUpdate").msgclass
  ReadyForPsbtFunding = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ReadyForPsbtFunding").msgclass
  BatchOpenChannelRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.BatchOpenChannelRequest").msgclass
  BatchOpenChannel = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.BatchOpenChannel").msgclass
  BatchOpenChannelResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.BatchOpenChannelResponse").msgclass
  OpenChannelRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.OpenChannelRequest").msgclass
  OpenStatusUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.OpenStatusUpdate").msgclass
  KeyLocator = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.KeyLocator").msgclass
  KeyDescriptor = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.KeyDescriptor").msgclass
  ChanPointShim = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChanPointShim").msgclass
  PsbtShim = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PsbtShim").msgclass
  FundingShim = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FundingShim").msgclass
  FundingShimCancel = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FundingShimCancel").msgclass
  FundingPsbtVerify = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FundingPsbtVerify").msgclass
  FundingPsbtFinalize = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FundingPsbtFinalize").msgclass
  FundingTransitionMsg = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FundingTransitionMsg").msgclass
  FundingStateStepResp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FundingStateStepResp").msgclass
  PendingHTLC = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingHTLC").msgclass
  PendingChannelsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingChannelsRequest").msgclass
  PendingChannelsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingChannelsResponse").msgclass
  PendingChannelsResponse::PendingChannel = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingChannelsResponse.PendingChannel").msgclass
  PendingChannelsResponse::PendingOpenChannel = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingChannelsResponse.PendingOpenChannel").msgclass
  PendingChannelsResponse::WaitingCloseChannel = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingChannelsResponse.WaitingCloseChannel").msgclass
  PendingChannelsResponse::Commitments = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingChannelsResponse.Commitments").msgclass
  PendingChannelsResponse::ClosedChannel = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingChannelsResponse.ClosedChannel").msgclass
  PendingChannelsResponse::ForceClosedChannel = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingChannelsResponse.ForceClosedChannel").msgclass
  PendingChannelsResponse::ForceClosedChannel::AnchorState = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PendingChannelsResponse.ForceClosedChannel.AnchorState").enummodule
  ChannelEventSubscription = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelEventSubscription").msgclass
  ChannelEventUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelEventUpdate").msgclass
  ChannelEventUpdate::UpdateType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelEventUpdate.UpdateType").enummodule
  WalletAccountBalance = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.WalletAccountBalance").msgclass
  WalletBalanceRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.WalletBalanceRequest").msgclass
  WalletBalanceResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.WalletBalanceResponse").msgclass
  Amount = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Amount").msgclass
  ChannelBalanceRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelBalanceRequest").msgclass
  ChannelBalanceResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelBalanceResponse").msgclass
  QueryRoutesRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.QueryRoutesRequest").msgclass
  NodePair = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NodePair").msgclass
  EdgeLocator = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.EdgeLocator").msgclass
  QueryRoutesResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.QueryRoutesResponse").msgclass
  Hop = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Hop").msgclass
  MPPRecord = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.MPPRecord").msgclass
  AMPRecord = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.AMPRecord").msgclass
  Route = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Route").msgclass
  NodeInfoRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NodeInfoRequest").msgclass
  NodeInfo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NodeInfo").msgclass
  LightningNode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.LightningNode").msgclass
  NodeAddress = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NodeAddress").msgclass
  RoutingPolicy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.RoutingPolicy").msgclass
  ChannelEdge = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelEdge").msgclass
  ChannelGraphRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelGraphRequest").msgclass
  ChannelGraph = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelGraph").msgclass
  NodeMetricsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NodeMetricsRequest").msgclass
  NodeMetricsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NodeMetricsResponse").msgclass
  FloatMetric = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FloatMetric").msgclass
  ChanInfoRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChanInfoRequest").msgclass
  NetworkInfoRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NetworkInfoRequest").msgclass
  NetworkInfo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NetworkInfo").msgclass
  StopRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.StopRequest").msgclass
  StopResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.StopResponse").msgclass
  GraphTopologySubscription = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.GraphTopologySubscription").msgclass
  GraphTopologyUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.GraphTopologyUpdate").msgclass
  NodeUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NodeUpdate").msgclass
  ChannelEdgeUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelEdgeUpdate").msgclass
  ClosedChannelUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ClosedChannelUpdate").msgclass
  HopHint = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.HopHint").msgclass
  SetID = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.SetID").msgclass
  RouteHint = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.RouteHint").msgclass
  AMPInvoiceState = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.AMPInvoiceState").msgclass
  Invoice = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Invoice").msgclass
  Invoice::InvoiceState = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Invoice.InvoiceState").enummodule
  InvoiceHTLC = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.InvoiceHTLC").msgclass
  AMP = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.AMP").msgclass
  AddInvoiceResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.AddInvoiceResponse").msgclass
  PaymentHash = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PaymentHash").msgclass
  ListInvoiceRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListInvoiceRequest").msgclass
  ListInvoiceResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListInvoiceResponse").msgclass
  InvoiceSubscription = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.InvoiceSubscription").msgclass
  Payment = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Payment").msgclass
  Payment::PaymentStatus = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Payment.PaymentStatus").enummodule
  HTLCAttempt = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.HTLCAttempt").msgclass
  HTLCAttempt::HTLCStatus = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.HTLCAttempt.HTLCStatus").enummodule
  ListPaymentsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListPaymentsRequest").msgclass
  ListPaymentsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListPaymentsResponse").msgclass
  DeletePaymentRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.DeletePaymentRequest").msgclass
  DeleteAllPaymentsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.DeleteAllPaymentsRequest").msgclass
  DeletePaymentResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.DeletePaymentResponse").msgclass
  DeleteAllPaymentsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.DeleteAllPaymentsResponse").msgclass
  AbandonChannelRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.AbandonChannelRequest").msgclass
  AbandonChannelResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.AbandonChannelResponse").msgclass
  DebugLevelRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.DebugLevelRequest").msgclass
  DebugLevelResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.DebugLevelResponse").msgclass
  PayReqString = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PayReqString").msgclass
  PayReq = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PayReq").msgclass
  Feature = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Feature").msgclass
  FeeReportRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FeeReportRequest").msgclass
  ChannelFeeReport = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelFeeReport").msgclass
  FeeReportResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FeeReportResponse").msgclass
  PolicyUpdateRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PolicyUpdateRequest").msgclass
  FailedUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FailedUpdate").msgclass
  PolicyUpdateResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PolicyUpdateResponse").msgclass
  ForwardingHistoryRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ForwardingHistoryRequest").msgclass
  ForwardingEvent = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ForwardingEvent").msgclass
  ForwardingHistoryResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ForwardingHistoryResponse").msgclass
  ExportChannelBackupRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ExportChannelBackupRequest").msgclass
  ChannelBackup = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelBackup").msgclass
  MultiChanBackup = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.MultiChanBackup").msgclass
  ChanBackupExportRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChanBackupExportRequest").msgclass
  ChanBackupSnapshot = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChanBackupSnapshot").msgclass
  ChannelBackups = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelBackups").msgclass
  RestoreChanBackupRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.RestoreChanBackupRequest").msgclass
  RestoreBackupResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.RestoreBackupResponse").msgclass
  ChannelBackupSubscription = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelBackupSubscription").msgclass
  VerifyChanBackupResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.VerifyChanBackupResponse").msgclass
  MacaroonPermission = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.MacaroonPermission").msgclass
  BakeMacaroonRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.BakeMacaroonRequest").msgclass
  BakeMacaroonResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.BakeMacaroonResponse").msgclass
  ListMacaroonIDsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListMacaroonIDsRequest").msgclass
  ListMacaroonIDsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListMacaroonIDsResponse").msgclass
  DeleteMacaroonIDRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.DeleteMacaroonIDRequest").msgclass
  DeleteMacaroonIDResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.DeleteMacaroonIDResponse").msgclass
  MacaroonPermissionList = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.MacaroonPermissionList").msgclass
  ListPermissionsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListPermissionsRequest").msgclass
  ListPermissionsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ListPermissionsResponse").msgclass
  Failure = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Failure").msgclass
  Failure::FailureCode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Failure.FailureCode").enummodule
  ChannelUpdate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ChannelUpdate").msgclass
  MacaroonId = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.MacaroonId").msgclass
  Op = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Op").msgclass
  CheckMacPermRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.CheckMacPermRequest").msgclass
  CheckMacPermResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.CheckMacPermResponse").msgclass
  RPCMiddlewareRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.RPCMiddlewareRequest").msgclass
  StreamAuth = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.StreamAuth").msgclass
  RPCMessage = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.RPCMessage").msgclass
  RPCMiddlewareResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.RPCMiddlewareResponse").msgclass
  MiddlewareRegistration = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.MiddlewareRegistration").msgclass
  InterceptFeedback = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.InterceptFeedback").msgclass
  OutputScriptType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.OutputScriptType").enummodule
  AddressType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.AddressType").enummodule
  CommitmentType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.CommitmentType").enummodule
  Initiator = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.Initiator").enummodule
  ResolutionType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ResolutionType").enummodule
  ResolutionOutcome = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.ResolutionOutcome").enummodule
  NodeMetricType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.NodeMetricType").enummodule
  InvoiceHTLCState = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.InvoiceHTLCState").enummodule
  PaymentFailureReason = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.PaymentFailureReason").enummodule
  FeatureBit = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.FeatureBit").enummodule
  UpdateFailure = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("lnrpc.UpdateFailure").enummodule
end
